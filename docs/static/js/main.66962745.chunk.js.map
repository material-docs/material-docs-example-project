{"version":3,"sources":["serviceWorker.js","pages/FirstPage.js","pages/SecondPage.js","index.js"],"names":["Boolean","window","location","hostname","match","FirstPage","name","searchLabel","searchDescription","searchTags","src","SecondPage","noDivider","page","ReactDOM","render","StrictMode","version","logo","keywords","description","author","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wMCTS,SAASC,IACpB,OACI,kBAAC,IAAD,CACIC,KAAM,gBACNC,YAAa,2BACbC,kBAAmB,kCACnBC,WAAY,CAAC,KAAM,OAAQ,QAAS,UAAW,eAE/C,kBAAC,IAAD,iCACA,kBAAC,IAAD,yCACA,kBAAC,IAAD,mFACA,kBAAC,IAAD,CAAOC,IAAK,kHACZ,kBAAC,IAAD,wCACA,kBAAC,IAAD,wC,+GCXG,SAASC,IACpB,OACI,kBAAC,IAAD,CACIL,KAAM,gBACNC,YAAa,qBACbC,kBAAmB,iCACnBC,WAAY,CAAC,OAAQ,UAAW,YAEhC,kBAAC,IAAD,+BACA,kBAAC,IAAD,CAAIG,WAAS,GAAb,SACA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,eACA,kBAAC,IAAD,YACA,kBAAC,IAAD,gBAGR,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,kBACA,kBAAC,IAAD,WACA,kBAAC,IAAD,aAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,gBACA,kBAAC,IAAD,YACA,kBAAC,IAAD,aAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,0BACA,kBAAC,IAAD,WACA,kBAAC,IAAD,eAIZ,kBAAC,IAAD,CAAMC,KAAM,CAAC,WAAY,kBAAzB,8B,sBCnCZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CACIV,KAAM,mBACNW,QAAS,cACTC,KAAM,0DACNC,SAAU,CAAC,KAAM,OAAQ,iBACzBC,YAAa,gEACbC,OAAQ,iBAER,kBAAC,IAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAYf,KAAM,YACd,kBAACD,EAAD,OAEJ,kBAACM,EAAD,SAIZW,SAASC,eAAe,SHkGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.66962745.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport DocsPage from \"@material-docs/core/components/DocsPage\";\r\nimport H1 from \"@material-docs/core/components/H1\";\r\nimport H3 from \"@material-docs/core/components/H3\";\r\nimport Markdown from \"@material-docs/core/components/Markdown\";\r\nimport Image from \"@material-docs/core/components/Image\";\r\nimport H4 from \"@material-docs/core/components/H4\";\r\nimport Code from \"@material-docs/core/components/Code\";\r\n\r\nexport default function FirstPage() {\r\n    return (\r\n        <DocsPage\r\n            name={\"Page about me\"}\r\n            searchLabel={\"Danil Andreev | About me\"}\r\n            searchDescription={\"This is a page about my person.\"}\r\n            searchTags={[\"me\", \"info\", \"danil\", \"andreev\", \"programmer\"]}\r\n        >\r\n            <H1>My name is Danil Andreev</H1>\r\n            <H3>This is a page about my history.</H3>\r\n            <Markdown>Hello, my name is __Danil Andreev__, I am a programmer from Kiev, Ukraine.</Markdown>\r\n            <Image src={\"https://cdnb.artstation.com/p/users/avatars/000/449/963/large/fc6a568b26ecfe1fe02f6dc60da732ae.jpg?1587936613\"}/>\r\n            <H4>I will show you a piece of code</H4>\r\n            <Code>\r\n                $ Hello darkness my old friend\r\n            </Code>\r\n        </DocsPage>\r\n\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport DocsPage from \"@material-docs/core/components/DocsPage\";\r\nimport H1 from \"@material-docs/core/components/H1\";\r\nimport Table from \"@material-docs/core/components/Table\";\r\nimport TableRow from \"@material-docs/core/components/TableRow\";\r\nimport TableCell from \"@material-docs/core/components/TableCell\";\r\nimport TableHead from \"@material-docs/core/components/TableHead\";\r\nimport TableBody from \"@material-docs/core/components/TableBody\";\r\nimport H3 from \"@material-docs/core/components/H3\";\r\nimport Link from \"@material-docs/core/components/Link\";\r\n\r\nexport default function SecondPage() {\r\n    return (\r\n        <DocsPage\r\n            name={\"Features page\"}\r\n            searchLabel={\"Features are cool!\"}\r\n            searchDescription={\"This is a page about features.\"}\r\n            searchTags={[\"page\", \"feature\", \"amazing\"]}\r\n        >\r\n            <H1>This is a feature page</H1>\r\n            <H3 noDivider>Table</H3>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Action</TableCell>\r\n                        <TableCell>Dog</TableCell>\r\n                        <TableCell>Human</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>Can speak</TableCell>\r\n                        <TableCell>No</TableCell>\r\n                        <TableCell>Yes</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Can eat</TableCell>\r\n                        <TableCell>Yes</TableCell>\r\n                        <TableCell>Yes</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell>Can run very fast</TableCell>\r\n                        <TableCell>No</TableCell>\r\n                        <TableCell>Yes</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n            <Link page={[\"My Group\", \"Page about me\"]}>Redirect to Page About Me</Link>\r\n        </DocsPage>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport DocsLayout from \"@material-docs/core/components/DocsLayout\";\r\nimport DocsPages from \"@material-docs/core/components/DocsPages\";\r\nimport DocsMenu from \"@material-docs/core/components/DocsMenu\";\r\nimport AutoDocsMenu from \"@material-docs/core/components/AutoDocsMenu\";\r\nimport FirstPage from \"./pages/FirstPage\";\r\nimport SecondPage from \"./pages/SecondPage\";\r\nimport PagesGroup from \"@material-docs/core/components/PagesGroup\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <DocsLayout\r\n            name={\"My documentation\"}\r\n            version={\"1.0.0-alpha\"}\r\n            logo={\"http://material-docs.com/static/media/logo.5a237c82.svg\"}\r\n            keywords={[\"my\", \"test\", \"documentation\"]}\r\n            description={\"This is an example documentation for Material Docs framework.\"}\r\n            author={\"Danil Andreev\"}\r\n        >\r\n            <DocsMenu>\r\n                <AutoDocsMenu />\r\n            </DocsMenu>\r\n            <DocsPages>\r\n                <PagesGroup name={\"My Group\"}>\r\n                    <FirstPage/>\r\n                </PagesGroup>\r\n                <SecondPage/>\r\n            </DocsPages>\r\n        </DocsLayout>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}